openapi: 3.1.0
x-stoplight:
  id: yvmuw34jwk7sl
info:
  title: alpha3
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /authenticate:
    post:
      summary: Authenticate
      operationId: authenticate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      description: Authenticates the login information and returns a token.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                identity:
                  type: string
                  description: Can be either email or username.
                password:
                  type: string
    parameters: []
  /users:
    get:
      summary: List Users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      operationId: list-users
      x-internal: false
      description: Lists all `Users`.
    post:
      summary: Create User
      operationId: create-user
      responses:
        '200':
          description: OK
      description: Create a new `User`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                password:
                  type: string
        description: ''
  '/users/{user_id}/{other_id}':
    parameters:
      - $ref: '#/components/parameters/user_id'
      - schema:
          type: string
        name: other_id
        in: path
        required: true
    get:
      summary: Get User
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      operationId: get-user
      description: Get `User` details.
    put:
      summary: Update User
      operationId: update-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Update `User` details. Allows partial updates.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
    delete:
      summary: Delete User
      operationId: delete-user
      responses:
        '200':
          description: OK
      description: Deletes a `User`.
  /service/init:
    post:
      summary: Initialize installation
      operationId: initialize
      responses:
        '200':
          description: OK
      description: 'Deletes any database data, creates a new instance and populates with default data.'
  '/users/{user_id}/repositories':
    get:
      summary: List Repositories
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Repository'
      operationId: list-repositories
      description: Lists all of the `Users` `Repository`.
    parameters:
      - $ref: '#/components/parameters/user_id'
    post:
      summary: Create Repository
      operationId: create-repository
      responses:
        '200':
          description: OK
      description: Creates a new `Repository` for the `User`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                visibility:
                  type: string
                  enum:
                    - PUBLIC
                    - PRIVATE
                  default: PUBLIC
                github_url:
                  type: string
  '/users/{user_id}/repositories/{repository_id}':
    parameters:
      - $ref: '#/components/parameters/user_id'
      - $ref: '#/components/parameters/repository_id'
    get:
      summary: Get Repository
      tags: []
      responses: {}
      operationId: get-repository
      description: Get `Repository` details.
    put:
      summary: Update Repository
      operationId: update-repository
      responses:
        '200':
          description: OK
      description: Updates `Repository` details.
    delete:
      summary: Delete Repository
      operationId: delete-repository
      responses:
        '200':
          description: OK
      description: Deletes a `Repository`.
components:
  schemas:
    User:
      title: User
      x-stoplight:
        id: d27kok21ywqdd
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        username:
          type: string
    Repository:
      title: Repository
      x-stoplight:
        id: xr9wmdzso5glo
      type: object
      examples: []
      properties:
        id:
          type: integer
        name:
          type: string
        visibility:
          type: string
          enum:
            - PUBLIC
            - PRIVATE
          default: PUBLIC
        github_url:
          type: string
          description: Link to public github repository.
  parameters:
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: UUID representing a `User`.
    repository_id:
      name: repository_id
      in: path
      required: true
      schema:
        type: integer
      description: Integer representing a `Repository`.
    int_param:
      name: int_param
      in: path
      required: true
      schema:
        type: integer
      description: integer parameter
    abc:
      name: abc
      in: path
      required: true
      schema:
        type: string
        format: email
    bcd:
      name: bcd
      in: path
      required: true
      schema:
        type: string
        enum:
          - ENUM1
          - ENUM2
          - enum3
    cde:
      name: cde
      in: path
      required: true
      schema:
        type: string
        minLength: 5
        maxLength: 10
    def:
      name: def
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9.a-zA-Z0-9.!#$%&''*+-/=?^_`{|}~]+@[a-zA-Z0-9]+\.[a-zA-Z]+'
    efg:
      name: efg
      in: path
      required: true
      schema:
        type: integer
        minimum: 12
    feg:
      name: feg
      in: path
      required: true
      schema:
        type: integer
        maximum: 123
        exclusiveMaximum: true
  securitySchemes:
    access_token:
      type: http
      scheme: bearer
      description: ''
